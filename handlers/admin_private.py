from datetime import datetime

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from kbds.inline import get_callback_btns
from utils.days_to_month import days_to_str
from filters.users_filter import OwnerFilter
from skynetapi.skynetapi import (
    edit_customer_date, 
    auth, 
    get_client, 
    edit_customer_limit_ip, 
    add_customer,
)
from database.queries import (
    orm_get_user_by_id,
    orm_get_users,
    orm_get_subscribers,
    orm_block_user,
    orm_get_tariffs,
    orm_add_tariff,
    orm_delete_tariff,
    orm_get_tariff,
    orm_edit_tariff,
    orm_add_faq,
    orm_get_faq,
    orm_delete_faq,
    orm_edit_faq,
    orm_unblock_user,
    orm_add_server,
    orm_edit_server,
    orm_delete_server,
    orm_get_servers,
    orm_get_server,
    orm_get_user_servers,
    orm_add_user_server,
    orm_change_user_status,
)

admin_private_router = Router()
admin_private_router.message.filter(OwnerFilter())



@admin_private_router.callback_query(F.data == "admin")
async def call_start(callback):
    await callback.message.answer("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=get_callback_btns(btns={
        'üìÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏': 'tariffs_list',
        'üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤': 'orders_list',
        'üì´ –†–∞—Å—Å—ã–ª–∫–∞': 'send',
        '‚öô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ': 'edit_faq',
        '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏': 'servers_list'
    }, sizes=(2, 2, 1)))


@admin_private_router.message(Command("admin"))
async def start(message: types.Message):
	await message.answer("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=get_callback_btns(btns={
        'üìÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏': 'tariffs_list',
        'üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤': 'orders_list',
        'üì´ –†–∞—Å—Å—ã–ª–∫–∞': 'send',
        '‚öô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ': 'edit_faq',
        '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏': 'servers_list'
    }, sizes=(2,2,1)))
	

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
@admin_private_router.callback_query(F.data == 'tariffs_list')
async def get_tariffs(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    

    tariff_list = await orm_get_tariffs(session)

    for tariff in tariff_list:
        await callback_query.message.answer(
            text=f"<b>–°—Ä–æ–∫:</b> {days_to_str(tariff.sub_time)} \n<b>–¶–µ–Ω–∞:</b> {tariff.price}\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> {tariff.devices}\n<b>–¢–∏–ø: {'–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂' if tariff.recuring else '–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂'}</b>", 
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'edittariff_{tariff.id}', '–£–¥–∞–ª–∏—Ç—å': f'deletetariff_{tariff.id}'})
        )
    
    if tariff_list:
        await callback_query.message.answer(
                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ ‚¨Ü", 
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ': f'addtariff', '–î–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂': f'addonepay'})
            )
    else:
        await callback_query.message.answer(
                text="–¢–∞—Ä–∏—Ñ–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", 
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ': f'addtariff', '–î–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂': f'addonepay'})
            )


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
class FSMAddTariff(StatesGroup):
    sub_time = State()
    price = State()
    devices = State()

# Undo text for add tariff FSM
FSMAddTariff_undo_text = {
    'FSMAddTariff:sub_time': '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:price': '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ',
}

# Cancel handler for FSMAddTariff
@admin_private_router.message(StateFilter("*"), F.text.in_({'/–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∞'}))
async def cancel_fsm_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')

# Back handler for FSMAddTariff
@admin_private_router.message(StateFilter('FSMAddTariff'), F.text.in_({'/–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'}))
async def back_step_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSMAddTariff.name.state:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    previous = None
    for step in FSMAddTariff.all_states:
        if step.state == current_state:
            if previous is not None:
                await state.set_state(previous.state)
                await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É. {FSMAddTariff_undo_text[previous.state]}")
            return
        previous = step


@admin_private_router.callback_query(StateFilter(None), F.data == "addtariff")
async def add_product_description(callback: types.CallbackQuery, state: FSMContext):
    
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:',
        reply_markup=get_callback_btns(
            btns={'1 –º–µ—Å—è—Ü': f'month_31', '2 –º–µ—Å—è—Ü–∞': f'month_61', '3 –º–µ—Å—è—Ü–∞': f'month_92', '4 –º–µ—Å—è—Ü': f'month_122', '5 –º–µ—Å—è—Ü': f'month_153', '6 –º–µ—Å—è—Ü': f'month_183', '7 –º–µ—Å—è—Ü': f'month_214', '8 –º–µ—Å—è—Ü': f'month_244', '9 –º–µ—Å—è—Ü': f'month_275', '10 –º–µ—Å—è—Ü': f'month_305', '11 –º–µ—Å—è—Ü': f'month_336', '12 –º–µ—Å—è—Ü': f'month_365'},
            sizes=(1,),
        )
    )
    await state.set_state(FSMAddTariff.sub_time)


@admin_private_router.callback_query(FSMAddTariff.sub_time)
async def add_name_callback(callback, state):
    try:
        await state.update_data(sub_time=int(callback.data.split('_')[-1]))
    except:
        await callback.message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')
        return
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:')
    await state.set_state(FSMAddTariff.devices)


@admin_private_router.message(FSMAddTariff.sub_time, F.text)
async def add_product_description(message, state: FSMContext):
    try:
        await state.update_data(sub_time=int(message.text))
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')
         return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:')
    await state.set_state(FSMAddTariff.devices)


@admin_private_router.message(FSMAddTariff.devices)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(devices=int(message.text))
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')
         return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏:')
    await state.set_state(FSMAddTariff.price)
    


@admin_private_router.message(FSMAddTariff.price)
async def add_product(message: types.Message, state: FSMContext, session):
    try:
        await state.update_data(price=int(message.text))
        await state.update_data(recuring=True)
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:')
         return
    await message.answer('‚úÖ –¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω')
    data = await state.get_data()
    await orm_add_tariff(session=session, data=data)
    await state.clear()
    


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
@admin_private_router.callback_query(F.data.startswith('deletetariff_'))
async def delete_product(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_tariff(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –¢–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


class FSMEditTariff(StatesGroup):
    sub_time = State()
    price = State()
    devices = State()


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("edittariff"))
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(tariff_id=callback.data.split('_')[-1])
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç–Ω (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):',
        reply_markup=get_callback_btns(
            btns={'1 –º–µ—Å—è—Ü': f'month_31', '2 –º–µ—Å—è—Ü–∞': f'month_61', '3 –º–µ—Å—è—Ü–∞': f'month_92', '4 –º–µ—Å—è—Ü': f'month_122', '5 –º–µ—Å—è—Ü': f'month_153', '6 –º–µ—Å—è—Ü': f'month_183', '7 –º–µ—Å—è—Ü': f'month_214', '8 –º–µ—Å—è—Ü': f'month_244', '9 –º–µ—Å—è—Ü': f'month_275', '10 –º–µ—Å—è—Ü': f'month_305', '11 –º–µ—Å—è—Ü': f'month_336', '12 –º–µ—Å—è—Ü': f'month_365'},
            sizes=(1,),
        )
    )
    await state.set_state(FSMEditTariff.sub_time)


@admin_private_router.callback_query(FSMEditTariff.sub_time)
async def add_name_callback(callback, state):
    try:
        await state.update_data(sub_time=int(callback.data.split('_')[-1]))
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')
         return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:')
    await state.set_state(FSMAddTariff.devices)


@admin_private_router.message(FSMEditTariff.sub_time)
async def edit_tariff_sub_time(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(sub_time=None)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.price)
        return
    try:
        await state.update_data(sub_time=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.price)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')

@admin_private_router.message(FSMEditTariff.price)
async def edit_tariff_price(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(price=None)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.devices)
        return
    try:
        await state.update_data(price=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.devices)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:')

    

@admin_private_router.message(FSMEditTariff.devices)
async def edit_tariff_pay_id(message: types.Message, state: FSMContext, session):
    if message.text == '.':
        await state.update_data(devices=None)
    else:
        await state.update_data(devices=message.text.split('=')[-1])
    data = await state.get_data()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
    update_fields = {k: v for k, v in data.items() if v is not None}
    del update_fields['tariff_id']
    await message.answer('‚úÖ –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω')
    await orm_edit_tariff(session=session, tariff_id=data['tariff_id'], fields=update_fields)
    await state.clear()



# FAQ
@admin_private_router.callback_query(F.data == 'edit_faq')
async def get_faq(callback: types.CallbackQuery, state: FSMContext, session):
    
    await callback.answer()
    faq_list = await orm_get_faq(session)
    for faq in faq_list:
        await callback.message.answer(
            text=f"<b>–í–æ–ø—Ä–æ—Å:</b> {faq.ask}\n<b>–û—Ç–≤–µ—Ç:</b> {faq.answer}",
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'editfaq_{faq.id}', '–£–¥–∞–ª–∏—Ç—å': f'deletefaq_{faq.id}'})
        )
    if faq_list:
        await callback.message.answer(
                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚¨Ü",
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å': f'addfaq'})
            )
    else:
        await callback.message.answer(
                text="–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å': f'addfaq'})
            )


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
class FSMAddFAQ(StatesGroup):
    ask = State()
    answer = State()


@admin_private_router.callback_query(StateFilter(None), F.data == "addfaq")
async def add_faq(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:')
    await state.set_state(FSMAddFAQ.ask)


@admin_private_router.message(FSMAddFAQ.ask)
async def add_faq_description(message: types.Message, state: FSMContext):
    await state.update_data(ask=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')
    await state.set_state(FSMAddFAQ.answer)


@admin_private_router.message(FSMAddFAQ.answer)
async def add_faq_answer(message: types.Message, state: FSMContext, session):
    await state.update_data(answer=message.text)
    await message.answer('‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω')
    data = await state.get_data()
    await orm_add_faq(session=session, data=data)
    await state.clear()


# FSM –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
class FSMEditFAQ(StatesGroup):
    id = State()
    ask = State()
    answer = State()


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("editfaq"))
async def edit_faq(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(faq_id=callback.data.split('_')[-1])
    await callback.answer()
    await callback.message.answer('–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –≤–æ–ø—Ä–æ—Å. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /–æ—Ç–º–µ–Ω–∞ –∏–ª–∏ /–Ω–∞–∑–∞–¥')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ".":')
    await state.set_state(FSMEditFAQ.ask)


@admin_private_router.message(FSMEditFAQ.ask)
async def edit_faq_name(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(ask=None)
    else:
        await state.update_data(ask=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ".":')
    await state.set_state(FSMEditFAQ.answer)


@admin_private_router.message(FSMEditFAQ.answer)
async def edit_faq_description(message: types.Message, state: FSMContext, session):
    if message.text == '.':
        await state.update_data(answer=None)
    else:
        await state.update_data(answer=message.text)
    data = await state.get_data()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
    update_fields = {k: v for k, v in data.items() if v is not None}
    del update_fields['faq_id']
    await message.answer('‚úÖ –í–æ–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω')
    await orm_edit_faq(session=session, id=data['faq_id'], fields=update_fields)
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@admin_private_router.callback_query(F.data.startswith('deletefaq_'))
async def delete_faq(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_faq(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


class FSMSendMessages(StatesGroup):
    message = State()
    picture = State()
    recipients = State()


@admin_private_router.callback_query(StateFilter(None), F.data == "send")
async def send_messages(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:')
    await state.set_state(FSMSendMessages.message)


@admin_private_router.message(FSMSendMessages.message)
async def send_messages_description(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–∞. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ —Ç–æ –æ—Ç–ø—Ä–∞–≤—Ç–µ ".":')
    await state.set_state(FSMSendMessages.picture)


@admin_private_router.message(FSMSendMessages.picture, or_f(F.photo, F.text))
async def send_messages_picture(message: types.Message, state: FSMContext):
    if message.text == '.':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–ª–∏ –≤—Å–µ (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π).', reply_markup=get_callback_btns(btns={'–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': 'active_subscribers', '–í—Å–µ': 'all'}))
        await state.set_state(FSMSendMessages.recipients)
    else:
        await state.update_data(picture=message.photo[0].file_id)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–ª–∏ –≤—Å–µ (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π).', reply_markup=get_callback_btns(btns={'–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': 'active_subscribers', '–í—Å–µ': 'all'}))
        await state.set_state(FSMSendMessages.recipients)


@admin_private_router.callback_query(FSMSendMessages.recipients, F.data == "active_subscribers")
async def send_messages_active_subscribers(callback: types.CallbackQuery, state: FSMContext, session, bot):
    await callback.answer()
    users = await orm_get_subscribers(session)
    for user in users:
        try:
            data = await state.get_data()
    
            if data.get('picture'):
                await bot.send_photo(chat_id=user.user_id, photo=data['picture'], caption=data['message'])
            else:
                await bot.send_message(chat_id=user.user_id, text=data['message'])
        except:
            continue
    
    await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()


@admin_private_router.callback_query(FSMSendMessages.recipients, F.data == "all")
async def send_messages_all_subscribers(callback: types.CallbackQuery, state: FSMContext, session, bot):
    await callback.answer()
    users = await orm_get_users(session)
    for user in users:
        try:
            data = await state.get_data()
            if data.get('picture'):
                await bot.send_photo(chat_id=user.user_id, photo=data['picture'], caption=data['message'])
            else:
                await bot.send_message(chat_id=user.user_id, text=data['message'])
        except:
            continue

    await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()


# –ó–∞–∫–∞–∑—ã 
@admin_private_router.callback_query(StateFilter(None), F.data == "orders_list")
async def orders_list(callback: types.CallbackQuery, session):
    await callback.answer()
    message_text = ""
    orders = await orm_get_users(session)
    for order in orders:
        tariff = await orm_get_tariff(session, order.status)
        servers = await orm_get_user_servers(session, order.id)
        if order.status > 0 or order.sub_end:
            server = await orm_get_server(session, servers[0].server_id)
            cookies = await auth(server.server_url, server.login, server.password)
            with open('log.txt', 'w') as f:
                f.write(str(servers[0].tun_id))
 
            client = await get_client(cookies, server.server_url, servers[0].tun_id, server.indoub_id)
            message_text = f"<b>ID:</b> {order.user_id}\n<b>–ò–º—è:</b> {order.name}\n<b>–¢–∞—Ä–∏—Ñ:</b> {tariff.price} –∑–∞ {days_to_str(tariff.sub_time)}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {order.sub_end.strftime('%d.%m.%Y')}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {client['response']['limitIp']}\n–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if order.status else '–û—Ç–º–µ–Ω–µ–Ω–∞'}"
    
            await callback.message.answer(
                text=message_text,
                reply_markup=get_callback_btns(
                    btns={
                        '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': f'blockuser_{order.user_id}',
                        '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è': f"renew_{order.id}",
                        '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤': f"redevice_{order.id}",
                    }, sizes=[1,])
                )

    if orders:
        await callback.message.answer(
                text=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ‚¨Ü \n\n–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(orders)}",
            )
    else:
        await callback.message.answer(
                text=f"–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(orders)}",
            )


class FSMRenew(StatesGroup):
    days = State()

@admin_private_router.callback_query(StateFilter(None), F.data.startswith('renew_'))
async def renew_sub(callback, state):
    await state.update_data(user_id=callback.data.split())
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
    await state.set_state(FSMRenew.days)


@admin_private_router.message(FSMRenew.days)
async def days(message, session, state):
    data = await state.get_data()
    now = datetime.now()
    user_id = data['user_id'][0].split('_')[-1]
    date = message.text.split('.')
    if len(date) != 3:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
        return
    
    user = await orm_get_user_by_id(session, user_id)
    servers = await orm_get_user_servers(session, user.id)
    
    new_date = datetime(int(date[2]), int(date[1]), int(date[0]), now.hour, now.minute, now.second, now.microsecond)
    new_unix_date = int(new_date.timestamp() * 1000) 
    print(new_date, new_unix_date)
    for server in servers:
        server_info = await orm_get_server(session, server.server_id)
        cookies = await auth(server_info.server_url, server_info.login, server_info.password)
        await edit_customer_date(server_info, cookies, new_unix_date, server.tun_id, session)
    
    await orm_change_user_status(session, user_id, user.status, new_date)
    
    await message.answer("‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
    await state.clear()


class FSMDevice(StatesGroup):
    devices = State()

@admin_private_router.callback_query(StateFilter(None), F.data.startswith('redevice_'))
async def renew_sub(callback, state):
    await state.update_data(user_id=callback.data.split())
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    await state.set_state(FSMDevice.devices)


@admin_private_router.message(FSMDevice.devices)
async def days(message, session, state):
    data = await state.get_data()
    user_id = data['user_id'][0].split('_')[-1]
    try:
        date = int(message.text)
        user = await orm_get_user_by_id(session, user_id)
        servers = await orm_get_user_servers(session, user.id)
        
        for server in servers:
            server_info = await orm_get_server(session, server.server_id)
            cookies = await auth(server_info.server_url, server_info.login, server_info.password)
            cust = await edit_customer_limit_ip(server_info, cookies, date, user.user_id, session, server.tun_id)
            print(cust)
    
        await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        await state.clear()


    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        return
    
    

# –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_private_router.callback_query(StateFilter(None), F.data.startswith('blockuser_'))
async def block_user(callback: types.CallbackQuery, session):
    await callback.answer()
    await orm_block_user(session, callback.data.split('_')[-1])
    await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", reply_markup=get_callback_btns(btns={'—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': f"unblockuser_{callback.data.split('_')[-1]}"}))


# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_private_router.callback_query(StateFilter(None), F.data.startswith('unblockuser_'))
async def unblock_user(callback: types.CallbackQuery, session):
    await callback.answer()
    await orm_unblock_user(session, callback.data.split('_')[-1])
    await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")




# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
@admin_private_router.callback_query(F.data == 'servers_list')
async def choose_category(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    

    servers_list = await orm_get_servers(session)

    for server in servers_list:
        await callback_query.message.answer(
            text=f"<b>–ò–º—è:</b> {server.name}\n<b>url:</b> {server.server_url}\n<b>–õ–æ–≥–∏–Ω:</b> {server.login}\n<b>–ü–∞—Ä–æ–ª—å: {server.password}</b>", 
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'editserver_{server.id}', '–£–¥–∞–ª–∏—Ç—å': f'deleteserver_{server.id}'})
        )
    
    if servers_list:
        await callback_query.message.answer(
                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ ‚¨Ü", 
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä': f'addserver'})
            )
    else:
        await callback_query.message.answer(
                text="–°–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", 
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä': f'addserver'})
            )


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
class FSMAddServer(StatesGroup):
    name = State()
    url = State()
    login = State()
    password = State()
    indoub_id = State()

# Undo text for add tariff FSM
FSMAddTariff_undo_text = {
    'FSMAddServer:name': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMAddServer:url': '–í–≤–µ–¥–∏—Ç–µ url –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMAddServer:login': '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMAddServer:password': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
}


# Back handler for FSMAddTariff
@admin_private_router.message(StateFilter('FSMAddServer'), F.text.in_({'/–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'}))
async def back_step_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSMAddTariff.name.state:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    previous = None
    for step in FSMAddTariff.all_states:
        if step.state == current_state:
            if previous is not None:
                await state.set_state(previous.state)
                await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É. {FSMAddTariff_undo_text[previous.state]}")
            return
        previous = step


@admin_private_router.callback_query(StateFilter(None), F.data == "addserver")
async def add_product_description(callback: types.CallbackQuery, state: FSMContext):
    
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞):')
    await state.set_state(FSMAddServer.name)


@admin_private_router.message(FSMAddServer.name)
async def add_product_description(message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ url –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞:')
    await state.set_state(FSMAddServer.url)


@admin_private_router.message(FSMAddServer.url)
async def add_product_description(message: types.Message, state: FSMContext):
    await state.update_data(url=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω–¥–∞—É–±–∞:')
    
    await state.set_state(FSMAddServer.indoub_id)
    

@admin_private_router.message(FSMAddServer.indoub_id)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(indoub_id=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:')
    
        await state.set_state(FSMAddServer.login)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ id –∏–Ω–¥–∞—É–±–∞:')


@admin_private_router.message(FSMAddServer.login)
async def add_product_description(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:')

    await state.set_state(FSMAddServer.password)


@admin_private_router.message(FSMAddServer.password)
async def add_product(message: types.Message, state: FSMContext, session):
    await state.update_data(password=message.text)
    await message.answer('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
    data = await state.get_data()
    server = await orm_add_server(session=session, data=data)
    await add_users_to_new_server(session, server.id)

    await state.clear()


async def add_users_to_new_server(session, server_id):
    new_server = await orm_get_server(session, server_id)
    users = await orm_get_users(session)

    for i in users:
        if i.status == 0:
            continue
        cookies = await auth(new_server.server_url, new_server.login, new_server.password)
        expire_time = int(i.sub_end.timestamp() * 1000)
        tariff = await orm_get_tariff(session, i.status)

        new = await add_customer(
            new_server.server_url,
            new_server.indoub_id,
            cookies,
            new_server.name + f"_{i.id}",
            expire_time,
            tariff.devices,
            i.user_id,
            i.name,
        )
        await orm_add_user_server(session, i.id, server_id, new['id'])



# –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –±–∞–∑—ã
@admin_private_router.callback_query(F.data.startswith('deleteserver_'))
async def delete_product(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_server(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


class FSMEditServer(StatesGroup):
    name = State()
    url = State()
    login = State()
    password = State()
    indoub_id = State()

FSMAddTariff_undo_text = {
    'FSMEditServer:name': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMEditServer:url': '–í–≤–µ–¥–∏—Ç–µ url –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMEditServer:login': '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMEditServer:password': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ',
}


@admin_private_router.message(StateFilter('FSMEditServer'), F.text.in_({'/–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'}))
async def back_step_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSMEditServer.name.state:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    previous = None
    for step in FSMEditServer.all_states:
        if step.state == current_state:
            if previous is not None:
                await state.set_state(previous.state)
                await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É. {FSMAddTariff_undo_text[previous.state]}")
            return
        previous = step


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("editserver"))
async def add_product_description(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(server_id=callback.data.split('_')[-1])
    
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞) (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMEditServer.name)


@admin_private_router.message(FSMEditServer.name)
async def add_product_description(message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=None)
    else:
        await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ url –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMEditServer.url)


@admin_private_router.message(FSMEditServer.url)
async def add_product_description(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(server_url=None)
    else:
        await state.update_data(server_url=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id –∏–Ω–¥–∞—É–±–∞ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    
    await state.set_state(FSMEditServer.indoub_id)
    

@admin_private_router.message(FSMEditServer.indoub_id)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        if message.text == '.':
            await state.update_data(password=None)
        else:
            await state.update_data(indoub_id=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    
        await state.set_state(FSMEditServer.login)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ id –∏–Ω–¥–∞—É–±–∞:')


@admin_private_router.message(FSMEditServer.login)
async def add_product_description(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(password=None)
    else:
        await state.update_data(login=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')

    await state.set_state(FSMEditServer.password)

    

@admin_private_router.message(FSMEditServer.password)
async def edit_tariff_pay_id(message: types.Message, state: FSMContext, session):
    if message.text == '.':
        await state.update_data(password=None)
    else:
        await state.update_data(password=message.text)
    data = await state.get_data()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
    update_fields = {k: v for k, v in data.items() if v is not None}
    del update_fields['server_id']
    await message.answer('‚úÖ –°–µ—Ä–≤–µ—Ä –∏–∑–º–µ–Ω–µ–Ω')
    await orm_edit_server(session=session, id=data['server_id'], fields=update_fields)
    await state.clear()


